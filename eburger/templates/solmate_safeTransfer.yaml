version: 1.0.6
name: "Solmate SafeTransferLib Import Check"
severity: "Medium"
precision: "High"
description: "This template identifies instances where Solmate's SafeTransferLib is imported without performing checks to confirm the token contract's presence. A notable distinction exists between Solmate's SafeTransferLib and OpenZeppelin's SafeERC20 library: the latter ensures the target is indeed a contract, a step omitted by Solmate's library. It is crucial to note from the documentation that the functions within this library do not verify the existence of code at the token's address, leaving it up to the user to ensure validity."
impact: "Omitting checks for the token contract's presence could lead to tokens being sent to addresses that cannot interact with them properly, potentially resulting in the loss of assets or unsuccessful transactions."
action-items:
  - "Incorporate checks to confirm the presence of token contracts when utilizing Solmate's SafeTransferLib."
  - "Consider leveraging OpenZeppelin's SafeERC20 for ERC20 token interactions to incorporate contract presence verification."
references:
  - "https://github.com/Rari-Capital/solmate"
  - "https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol#L9"
reports: []
vulnerable_contracts: []
python: |
  results = []
  import_directives = get_nodes_by_types(ast_data, "ImportDirective")
  for directive in import_directives:
      absolute_path = directive.get("absolutePath", "")
      if "solmate" in absolute_path and "SafeTransferLib" in absolute_path:
          results.append(directive)
