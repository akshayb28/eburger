name: "Unsafe ERC20 Functions Detector"
description: "Detects potentially unsafe uses of ERC20 functions like transferFrom, approve, and transfer. It's recommended to use OpenZeppelin's SafeERC20 library."
severity: "Low"
precision: "Medium"
action-items:
  - "Review the use of direct ERC20 function calls and consider replacing them with OpenZeppelin's SafeERC20 library calls for added safety checks."
  - "Ensure that the return values of ERC20 functions are checked or handled properly to prevent unexpected behavior."
references:
  - "https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20"
reports:
  - "Link to an example report showcasing the impact of this issue, if available"
vulnerable_contracts:
  - "Link to a known contract exhibiting this issue, if available"
python: |
    results = []
    # Identifying direct calls to 'transfer', 'transferFrom', 'approve' on ERC20 tokens.
    function_calls = get_nodes_by_types(ast_data, "FunctionCall")

    for call in function_calls:
        # Extracting the called function name from the expression.
        if call.get("expression", {}).get("type") == "MemberAccess":
            member_access = call["expression"]
            function_name = member_access.get("memberName")
            if function_name in ["transfer", "transferFrom", "approve"]:
                # Finding the function definition that contains this call.
                function_definition = get_enclosing_function(call)
                if function_definition and function_definition.get("stateMutability") not in ["pure", "view"]:
                    # Assuming 'get_enclosing_contract' is a placeholder for logic to find the contract containing this function.
                    contract_definition = get_enclosing_contract(function_definition)
                    if contract_definition:
                        results.append({
                            'contract': contract_definition.get('name'),
                            'function': function_definition.get('name'),
                            'call': function_name
                        })
